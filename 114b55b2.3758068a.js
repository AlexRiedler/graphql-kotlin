(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{234:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),s=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},g=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(t),g=r,b=u["".concat(o,".").concat(g)]||u[g]||d[g]||l;return t?a.a.createElement(b,i(i({ref:n},c),{},{components:t})):a.a.createElement(b,i({ref:n},c))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=g;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=t[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},235:function(e,n,t){"use strict";function r(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}n.a=function(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(a&&(a+=" "),a+=n);return a}},236:function(e,n,t){"use strict";var r=t(0),a=t(237);n.a=function(){var e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},237:function(e,n,t){"use strict";var r=t(0),a=Object(r.createContext)(void 0);n.a=a},238:function(e,n,t){"use strict";var r=t(0),a=t.n(r),l=t(236),o=t(235),i=t(52),p=t.n(i),c=37,s=39;n.a=function(e){var n=e.lazy,t=e.block,i=e.defaultValue,u=e.values,d=e.groupId,g=e.className,b=Object(l.a)(),m=b.tabGroupChoices,h=b.setTabGroupChoices,f=Object(r.useState)(i),v=f[0],O=f[1],y=r.Children.toArray(e.children);if(null!=d){var j=m[d];null!=j&&j!==v&&u.some((function(e){return e.value===j}))&&O(j)}var x=function(e){O(e),null!=d&&h(d,e)},N=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":t},g)},u.map((function(e){var n=e.value,t=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":v===n,className:Object(o.a)("tabs__item",p.a.tabItem,{"tabs__item--active":v===n}),key:n,ref:function(e){return N.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case s:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case c:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(N,e.target,e)},onFocus:function(){return x(n)},onClick:function(){x(n)}},t)}))),n?Object(r.cloneElement)(y.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},y.map((function(e,n){return Object(r.cloneElement)(e,{key:n,hidden:e.props.value!==v})}))))}},239:function(e,n,t){"use strict";var r=t(0),a=t.n(r);n.a=function(e){var n=e.children,t=e.hidden,r=e.className;return a.a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return d}));var r=t(3),a=t(7),l=(t(0),t(234)),o=t(238),i=t(239),p={id:"client-overview",title:"Client Overview",original_id:"client-overview"},c={unversionedId:"client/client-overview",id:"version-4.x.x/client/client-overview",isDocsHomePage:!1,title:"Client Overview",description:"GraphQL Kotlin provides a set of lightweight type-safe GraphQL HTTP clients. The library provides Ktor HTTP client",source:"@site/versioned_docs/version-4.x.x/client/client-overview.mdx",slug:"/client/client-overview",permalink:"/graphql-kotlin/client/client-overview",editUrl:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/docs/versioned_docs/version-4.x.x/client/client-overview.mdx",version:"4.x.x",lastUpdatedBy:"Shane Myrick",lastUpdatedAt:1613780568,sidebar:"version-4.x.x/docs",previous:{title:"Subscriptions",permalink:"/graphql-kotlin/server/spring-server/spring-subscriptions"},next:{title:"Client Features",permalink:"/graphql-kotlin/client/client-features"}},s=[{value:"Project Configuration",id:"project-configuration",children:[{value:"Build Configuration",id:"build-configuration",children:[]},{value:"Generating GraphQL Operations",id:"generating-graphql-operations",children:[]},{value:"Executing Operations",id:"executing-operations",children:[]}]}],u={toc:s};function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"GraphQL Kotlin provides a set of lightweight type-safe GraphQL HTTP clients. The library provides ",Object(l.b)("a",{parentName:"p",href:"https://ktor.io/clients/index.html"},"Ktor HTTP client"),"\nand ",Object(l.b)("a",{parentName:"p",href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-webclient"},"Spring WebClient"),"\nbased reference implementations as well as allows for custom implementations using other engines, see ",Object(l.b)("a",{parentName:"p",href:"/graphql-kotlin/client/client-customization"},"client customization"),"\ndocumentation for additional details. Type-safe data models are generated at build time by the GraphQL Kotlin ",Object(l.b)("a",{parentName:"p",href:"/graphql-kotlin/plugins/gradle-plugin-tasks"},"Gradle"),"\nand ",Object(l.b)("a",{parentName:"p",href:"/graphql-kotlin/plugins/maven-plugin-goals"},"Maven")," plugins."),Object(l.b)("p",null,"Client Features:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Supports query and mutation operations"),Object(l.b)("li",{parentName:"ul"},"Supports batch operations"),Object(l.b)("li",{parentName:"ul"},"Automatic generation of type-safe Kotlin models"),Object(l.b)("li",{parentName:"ul"},"Custom scalar support - defaults to String but can be configured to deserialize to specific types"),Object(l.b)("li",{parentName:"ul"},"Supports default enum values to gracefully handle new/unknown server values"),Object(l.b)("li",{parentName:"ul"},"Native support for coroutines"),Object(l.b)("li",{parentName:"ul"},"Easily configurable Ktor and Spring WebClient based HTTP Clients"),Object(l.b)("li",{parentName:"ul"},"Documentation generated from the underlying GraphQL schema")),Object(l.b)("h2",{id:"project-configuration"},"Project Configuration"),Object(l.b)("p",null,"GraphQL Kotlin provides both Gradle and Maven plugins to automatically generate your client code at build time. In order\nto auto-generate the client code, plugins require target GraphQL schema and a list of query files to process."),Object(l.b)("p",null,"GraphQL schema can be provided as"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"result of introspection query (default)"),Object(l.b)("li",{parentName:"ul"},"downloaded from an SDL endpoint"),Object(l.b)("li",{parentName:"ul"},"local file")),Object(l.b)("p",null,"See ",Object(l.b)("a",{parentName:"p",href:"https://expediagroup.github.io/graphql-kotlin/docs/plugins/gradle-plugin"},"Gradle")," and ",Object(l.b)("a",{parentName:"p",href:"https://expediagroup.github.io/graphql-kotlin/docs/plugins/maven-plugin"},"Maven"),"\nplugin documentation for additional details."),Object(l.b)("p",null,"GraphQL Kotlin plugins generated classes are simple POJOs that implement ",Object(l.b)("inlineCode",{parentName:"p"},"GraphQLClientRequest")," and optionally accept variables\n(only if underlying operation uses variables) as a constructor parameter. While ",Object(l.b)("inlineCode",{parentName:"p"},"GraphQLClient")," exposes generic methods\nthat allow you to execute either a single or batch request, plugins will also automatically generate a convenient ",Object(l.b)("inlineCode",{parentName:"p"},"execute<OperationName>"),"\nextension function that returns target operation result type."),Object(l.b)("p",null,">"," NOTE: If you are going to be using one of the reference client implementations it is highly recommended to also configure the\n",">"," plugin to generate client type specific extension code that will allow you to return operation specific type. See ",Object(l.b)("a",{parentName:"p",href:"/graphql-kotlin/client/client-customization"},"client customization"),"\n",">"," for additional details."),Object(l.b)("p",null,"Example below configures the project to use introspection query to obtain the schema and uses Ktor based HTTP client."),Object(l.b)("h3",{id:"build-configuration"},"Build Configuration"),Object(l.b)(o.a,{defaultValue:"gradle",values:[{label:"Gradle",value:"gradle"},{label:"Maven",value:"maven"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"gradle",mdxType:"TabItem"},Object(l.b)("p",null,"Basic ",Object(l.b)("inlineCode",{parentName:"p"},"build.gradle.kts")," Gradle configuration that executes introspection query against specified endpoint to obtain target\nschema and then generate the clients under ",Object(l.b)("inlineCode",{parentName:"p"},"com.example.generated")," package name:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-kotlin"},'import com.expediagroup.graphql.plugin.gradle.config.GraphQLClientType\nimport com.expediagroup.graphql.plugin.gradle.graphql\n\nplugins {\n    id("com.expediagroup.graphql") version $latestGraphQLKotlinVersion\n}\n\ndependencies {\n  implementation("com.expediagroup:graphql-kotlin-ktor-client:$latestGraphQLKotlinVersion")\n}\n\ngraphql {\n    client {\n        endpoint = "http://localhost:8080/graphql"\n        packageName = "com.example.generated"\n        clientType = GraphQLClientType.KTOR\n    }\n}\n'))),Object(l.b)(i.a,{value:"maven",mdxType:"TabItem"},Object(l.b)("p",null,"Basic Maven ",Object(l.b)("inlineCode",{parentName:"p"},"pom.xml")," configuration that executes introspection query against specified endpoint to obtain target\nschema and then generate the clients under ",Object(l.b)("inlineCode",{parentName:"p"},"com.example.generated")," package name:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-xml"},'\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>graphql-kotlin-maven-client-example</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n\n    <properties>\n        <graphql-kotlin.version>$latestGraphQLKotlinVersion</graphql-kotlin.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.expediagroup</groupId>\n            <artifactId>graphql-kotlin-ktor-client</artifactId>\n            <version>${graphql-kotlin.version}</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.expediagroup</groupId>\n                <artifactId>graphql-kotlin-maven-plugin</artifactId>\n                <version>${graphql-kotlin.version}</version>\n                <executions>\n                    <execution>\n                        <id>generate-graphql-client</id>\n                        <goals>\n                            <goal>introspectSchema</goal>\n                            <goal>generateClient</goal>\n                        </goals>\n                        <configuration>\n                            <endpoint>http://localhost:8080/graphql</endpoint>\n                            <packageName>com.example.generated</packageName>\n                            <schemaFile>${project.build.directory}/schema.graphql</schemaFile>\n                            <clientType>KTOR</clientType>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n')))),Object(l.b)("p",null,"See ",Object(l.b)("a",{parentName:"p",href:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/examples/client"},"graphql-kotlin-client-example")," project for complete\nworking examples of Gradle and Maven based projects."),Object(l.b)("h3",{id:"generating-graphql-operations"},"Generating GraphQL Operations"),Object(l.b)("p",null,"By default, GraphQL Kotlin build plugins will attempt to generate GraphQL operations from all ",Object(l.b)("inlineCode",{parentName:"p"},"*.graphql")," files located under\n",Object(l.b)("inlineCode",{parentName:"p"},"src/main/resources"),". Operations are validated against the target GraphQL schema, which can be manually provided, retrieved by\nthe plugins through introspection (as configured in examples above) or downloaded directly from a custom SDL endpoint.\nSee our documentation for more details on supported ",Object(l.b)("a",{parentName:"p",href:"/graphql-kotlin/plugins/gradle-plugin-tasks"},"Gradle tasks"),"\nand ",Object(l.b)("a",{parentName:"p",href:"/graphql-kotlin/plugins/maven-plugin-goals"},"Maven Mojos"),"."),Object(l.b)("p",null,"When creating your GraphQL operations make sure to always specify an operation name and name the files accordingly. Each\none of your GraphQL operation files will generate a corresponding Kotlin file with a class matching your operation\nname that will act as a wrapper for all corresponding data classes. For example, given ",Object(l.b)("inlineCode",{parentName:"p"},"HelloWorldQuery.graphql")," with\n",Object(l.b)("inlineCode",{parentName:"p"},"HelloWorldQuery")," as the operation name, GraphQL Kotlin plugins will generate a corresponding ",Object(l.b)("inlineCode",{parentName:"p"},"HelloWorldQuery.kt")," file\nwith a ",Object(l.b)("inlineCode",{parentName:"p"},"HelloWorldQuery")," class under the configured package."),Object(l.b)("p",null,"For example, given a simple schema"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql"},"\ntype Query {\n  helloWorld: String\n}\n\n")),Object(l.b)("p",null,"And a corresponding ",Object(l.b)("inlineCode",{parentName:"p"},"HelloWorldQuery.graphql")," query"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql"},"\nquery HelloWorldQuery {\n  helloWorld\n}\n\n")),Object(l.b)("p",null,"Plugins will generate following client code"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-kotlin"},'\npackage com.example.generated\n\nimport com.expediagroup.graphql.client.spring.GraphQLKtorClient\nimport com.expediagroup.graphql.types.GraphQLResponse\nimport kotlin.String\n\nconst val HELLO_WORLD_QUERY: String = "query HelloWorldQuery {\\n    helloWorld\\n}"\n\nclass HelloWorldQuery: GraphQLClientRequest(HELLO_WORLD_QUERY, "HelloWorldQuery") {\n    override fun responseType(): Class<HelloWorldQuery.Result> = HelloWorldQuery.Result::class.java\n\n    data class Result(\n        val helloWorld: String\n    )\n}\n\nsuspend fun GraphQLKtorClient<*>.executeHelloWorldQuery(\n    request: HelloWorldQuery,\n    requestCustomizer: HttpRequestBuilder.() -> Unit = {}\n): GraphQLResponse<HelloWorldQuery.Result> = execute(request, requestCustomizer)\n\n')),Object(l.b)("p",null,"Generated classes are simple POJOs that implement ",Object(l.b)("inlineCode",{parentName:"p"},"GraphQLClientRequest")," interface and represent a GraphQL request."),Object(l.b)("h3",{id:"executing-operations"},"Executing Operations"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"GraphQLKtorClient")," uses the Ktor HTTP client to execute the underlying operations and allows you to specify different engines\nand HTTP client features. ",Object(l.b)("inlineCode",{parentName:"p"},"GraphQLKtorClient")," requires target URL to be specified and defaults to fully asynchronous non-blocking\n",Object(l.b)("a",{parentName:"p",href:"https://ktor.io/clients/http-client/engines.html#cio"},"Coroutine-based IO engine"),". Please refer to ",Object(l.b)("a",{parentName:"p",href:"https://ktor.io/clients/index.html"},"Ktor HTTP client documentation"),"\nfor additional details."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-kotlin"},'\npackage com.example.client\n\nimport com.expediagroup.graphql.client.ktor.GraphQLKtorClient\nimport com.expediagroup.graphql.generated.HelloWorldQuery\nimport com.expediagroup.graphql.generated.executeHelloWorldQuery\nimport kotlinx.coroutines.runBlocking\nimport java.net.URL\n\nfun main() {\n    val client = GraphQLKtorClient(url = URL("http://localhost:8080/graphql"))\n    runBlocking {\n        val helloWorldQuery = HelloWorldQuery()\n        val result = client.executeHelloWorldQuery(helloWorldQuery)\n        println("hello world query result: ${result.data?.helloWorld}")\n    }\n    client.close()\n}\n\n')))}d.isMDXComponent=!0}}]);