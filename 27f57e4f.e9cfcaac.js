(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{234:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),u=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=r,m=p["".concat(o,".").concat(d)]||p[d]||b[d]||i;return t?a.a.createElement(m,s(s({ref:n},c),{},{components:t})):a.a.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},235:function(e,n,t){"use strict";function r(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}n.a=function(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(a&&(a+=" "),a+=n);return a}},236:function(e,n,t){"use strict";var r=t(0),a=t(237);n.a=function(){var e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},237:function(e,n,t){"use strict";var r=t(0),a=Object(r.createContext)(void 0);n.a=a},238:function(e,n,t){"use strict";var r=t(0),a=t.n(r),i=t(236),o=t(235),s=t(52),l=t.n(s),c=37,u=39;n.a=function(e){var n=e.lazy,t=e.block,s=e.defaultValue,p=e.values,b=e.groupId,d=e.className,m=Object(i.a)(),g=m.tabGroupChoices,f=m.setTabGroupChoices,v=Object(r.useState)(s),h=v[0],y=v[1],O=r.Children.toArray(e.children);if(null!=b){var j=g[b];null!=j&&j!==h&&p.some((function(e){return e.value===j}))&&y(j)}var w=function(e){y(e),null!=b&&f(b,e)},k=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":t},d)},p.map((function(e){var n=e.value,t=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===n,className:Object(o.a)("tabs__item",l.a.tabItem,{"tabs__item--active":h===n}),key:n,ref:function(e){return k.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case u:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case c:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(k,e.target,e)},onFocus:function(){return w(n)},onClick:function(){w(n)}},t)}))),n?Object(r.cloneElement)(O.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},O.map((function(e,n){return Object(r.cloneElement)(e,{key:n,hidden:e.props.value!==h})}))))}},239:function(e,n,t){"use strict";var r=t(0),a=t.n(r);n.a=function(e){var n=e.children,t=e.hidden,r=e.className;return a.a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},296:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/spring-initializer-194b68b7c5cb948d85ee32581fbff955.png"},96:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return b}));var r=t(3),a=t(7),i=(t(0),t(234)),o=t(238),s=t(239),l={id:"spring-overview",title:"Spring Server Overview"},c={unversionedId:"server/spring-server/spring-overview",id:"server/spring-server/spring-overview",isDocsHomePage:!1,title:"Spring Server Overview",description:"graphql-kotlin-spring-server",source:"@site/docs/server/spring-server/spring-overview.mdx",slug:"/server/spring-server/spring-overview",permalink:"/graphql-kotlin/next/server/spring-server/spring-overview",editUrl:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/docs/docs/server/spring-server/spring-overview.mdx",version:"current",lastUpdatedBy:"Shane Myrick",lastUpdatedAt:1613783723,sidebar:"docs",previous:{title:"Subscriptions",permalink:"/graphql-kotlin/next/server/server-subscriptions"},next:{title:"Automatically Created Beans",permalink:"/graphql-kotlin/next/server/spring-server/spring-beans"}},u=[{value:"WebFlux vs WebMVC",id:"webflux-vs-webmvc",children:[]},{value:"Setup",id:"setup",children:[]},{value:"Configuration",id:"configuration",children:[]},{value:"Writing Schema Code",id:"writing-schema-code",children:[]},{value:"Default Routes",id:"default-routes",children:[]}],p={toc:u};function b(e){var n=e.components,l=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,l,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/graphql-kotlin-spring-server"},"graphql-kotlin-spring-server"),"\nis a Spring Boot auto-configuration library that automatically configures beans required to start up a reactive GraphQL\nweb server."),Object(i.b)("h2",{id:"webflux-vs-webmvc"},"WebFlux vs WebMVC"),Object(i.b)("p",null,"This library is built on a ",Object(i.b)("a",{parentName:"p",href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html"},"Spring WebFlux (reactive)")," stack which is a non-blocking alternative to a traditional ",Object(i.b)("a",{parentName:"p",href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html"},"Spring Web MVC (servlet)")," based stack.\nSince both frameworks utilize different threading models they cannot and should not be intermixed.\nWhen building a GraphQL server using ",Object(i.b)("inlineCode",{parentName:"p"},"graphql-kotlin-spring-server")," all your queries and mutations should follow one of the supported ",Object(i.b)("a",{parentName:"p",href:"/graphql-kotlin/next/schema-generator/execution/async-models"},"asynchronous execution models"),"."),Object(i.b)("h2",{id:"setup"},"Setup"),Object(i.b)("p",null,"The simplest way to create a new Kotlin Spring Boot app is by generating one using ",Object(i.b)("a",{parentName:"p",href:"https://start.spring.io/"},"Spring Initializr.")),Object(i.b)("p",null,Object(i.b)("img",{alt:"Image of https://start.spring.io/",src:t(296).default})),Object(i.b)("p",null,"Once you get the sample application setup locally, you will need to add ",Object(i.b)("inlineCode",{parentName:"p"},"graphql-kotlin-spring-server")," dependency:"),Object(i.b)(o.a,{defaultValue:"gradle",values:[{label:"Gradle Kotlin",value:"gradle"},{label:"Maven",value:"maven"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"gradle",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-kotlin"},'implementation("com.expediagroup", "graphql-kotlin-spring-server", latestVersion)\n'))),Object(i.b)(s.a,{value:"maven",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-spring-server</artifactId>\n    <version>${latestVersion}</version>\n</dependency>\n")))),Object(i.b)("h2",{id:"configuration"},"Configuration"),Object(i.b)("p",null,"At a minimum, in order for ",Object(i.b)("inlineCode",{parentName:"p"},"graphql-kotlin-spring-server")," to automatically configure your GraphQL web server you need to\nspecify a list of supported packages that can be scanned for exposing your schema objects through reflections."),Object(i.b)("p",null,"You can do this through the spring application config or by overriding the ",Object(i.b)("inlineCode",{parentName:"p"},"SchemaGeneratorConfig")," bean. See customization below."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'\ngraphql:\n  packages:\n    - "com.your.package"\n\n')),Object(i.b)("h2",{id:"writing-schema-code"},"Writing Schema Code"),Object(i.b)("p",null,"In order to expose your queries, mutations, and/or subscriptions in the GraphQL schema, implement\ncorresponding marker interface and they will be automatically picked up by ",Object(i.b)("inlineCode",{parentName:"p"},"graphql-kotlin-spring-server"),"\nauto-configuration library."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-kotlin"},"\n@Component\nclass MyAwesomeQuery : Query {\n  fun myAwesomeQuery(): Widget { ... }\n}\n\n@Component\nclass MyAwesomeMutation : Mutation {\n  fun myAwesomeMutation(widget: Widget): Widget { ... }\n}\n\n@Component\nclass MyAwesomeSubscription : Subscription {\n  fun myAwesomeSubscription(): Publisher<Widget> { ... }\n}\n\ndata class Widget(val id: Int, val value: String)\n\n")),Object(i.b)("p",null,"The above code will result in a GraphQL server with following schema:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ntype Query {\n  myAwesomeQuery: Widget!\n}\n\ntype Mutation {\n  myAwesomeMutation(widget: WidgetInput!): Widget!\n}\n\ntype Subscription {\n  myAwesomeSubscription: Widget!\n}\n\ntype Widget {\n  id: Int!\n  value: String!\n}\n\ninput WidgetInput {\n  id: Int!\n  value: String!\n}\n\n")),Object(i.b)("h2",{id:"default-routes"},"Default Routes"),Object(i.b)("p",null,"Your newly created GraphQL server starts up with following preconfigured default routes:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"/graphql")," - GraphQL server endpoint used for processing queries and mutations"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"/subscriptions")," - GraphQL server endpoint used for processing subscriptions"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"/sdl")," - Convenience endpoint that returns current schema in Schema Definition Language format"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"/playground")," - Prisma Labs ",Object(i.b)("a",{parentName:"li",href:"https://github.com/prisma-labs/graphql-playground"},"GraphQL Playground IDE")," endpoint")))}b.isMDXComponent=!0}}]);