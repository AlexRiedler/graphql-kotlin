(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{112:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),o=(n(0),n(180)),c={id:"graphql-context-factory",title:"GraphQLContextFactory"},i={unversionedId:"server/graphql-context-factory",id:"server/graphql-context-factory",isDocsHomePage:!1,title:"GraphQLContextFactory",description:"GraphQLContextFactory is a generic method for generating a GraphQLContext for each request.",source:"@site/docs/server/graphql-context-factory.md",slug:"/server/graphql-context-factory",permalink:"/graphql-kotlin/docs/server/graphql-context-factory",editUrl:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/website/docs/server/graphql-context-factory.md",version:"current",lastUpdatedBy:"Dariusz Kuc",lastUpdatedAt:1616812820,sidebar:"docs",previous:{title:"GraphQLRequestParser",permalink:"/graphql-kotlin/docs/server/graphql-request-parser"},next:{title:"GraphQLRequestHandler",permalink:"/graphql-kotlin/docs/server/graphql-request-handler"}},l=[{value:"Nullable Context",id:"nullable-context",children:[]},{value:"Suspendable Factory",id:"suspendable-factory",children:[]},{value:"Server-Specific Abstractions",id:"server-specific-abstractions",children:[]},{value:"HTTP Headers and Cookies",id:"http-headers-and-cookies",children:[]},{value:"Federated Tracing",id:"federated-tracing",children:[]}],s={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"GraphQLContextFactory")," is a generic method for generating a ",Object(o.b)("inlineCode",{parentName:"p"},"GraphQLContext")," for each request."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-kotlin"},"\ninterface GraphQLContextFactory<out Context : GraphQLContext, Request> {\n    suspend fun generateContext(request: Request): Context?\n}\n\n")),Object(o.b)("p",null,"Given the generic server request, the interface should create a ",Object(o.b)("inlineCode",{parentName:"p"},"GraphQLContext")," class to be used for every new operation.\nThe context must implement the ",Object(o.b)("inlineCode",{parentName:"p"},"GraphQLContext")," interface from ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-kotlin-schema-generator"),".\nSee ",Object(o.b)("a",{parentName:"p",href:"/graphql-kotlin/docs/schema-generator/execution/contextual-data"},"execution context")," for more info on how the context can be used in the schema functions."),Object(o.b)("h2",{id:"nullable-context"},"Nullable Context"),Object(o.b)("p",null,"The factory may return ",Object(o.b)("inlineCode",{parentName:"p"},"null")," if a context is not required for execution. This allows the library to have a default factory that just returns ",Object(o.b)("inlineCode",{parentName:"p"},"null"),".\nIf your custom factory never returns ",Object(o.b)("inlineCode",{parentName:"p"},"null"),", then there is no need to use nullable arguments.\nHowever, if your custom factory may return ",Object(o.b)("inlineCode",{parentName:"p"},"null"),", you must define the context argument as nullable in the schema functions or a runtime exception will be thrown."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-kotlin"},"data class CustomContext(val value: String) : GraphQLContext\n\nclass CustomFactory : GraphQLContextFactory<CustomContext, ServerRequest> {\n    suspend fun generateContext(request: Request): Context? {\n        if (isSpecialRequest(request)) {\n            return null\n        }\n\n        val value = callSomeSuspendableService(request)\n        return CustomContext(value)\n    }\n}\n\nclass MyQuery : Query {\n\n    fun getResults(context: CustomContext?, input: String): String {\n        if (context != null) {\n            return getDataWithContext(input, context)\n        }\n\n        return getBasicData(input)\n    }\n}\n")),Object(o.b)("h2",{id:"suspendable-factory"},"Suspendable Factory"),Object(o.b)("p",null,"The interface is marked as a ",Object(o.b)("inlineCode",{parentName:"p"},"suspend")," function to allow the asynchronous fetching of context data.\nThis may be helpful if you need to call some other services to calculate a context value."),Object(o.b)("h2",{id:"server-specific-abstractions"},"Server-Specific Abstractions"),Object(o.b)("p",null,"A specific ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-kotlin-*-server")," library may provide an abstract class on top of this interface so users only have to be concerned with the context class and not the server class type.\nFor example the ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-kotlin-spring-server")," provides the following class, which sets the request type:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-kotlin"},"abstract class SpringGraphQLContextFactory<out T : GraphQLContext> : GraphQLContextFactory<T, ServerRequest>\n")),Object(o.b)("h2",{id:"http-headers-and-cookies"},"HTTP Headers and Cookies"),Object(o.b)("p",null,"For common use cases around authorization, authentication, or tracing you may need to read HTTP headers and cookies.\nThis should be done in the ",Object(o.b)("inlineCode",{parentName:"p"},"GraphQLContextFactory")," and relevant data should be added to the context to be accessible during schema exectuion."),Object(o.b)("h2",{id:"federated-tracing"},"Federated Tracing"),Object(o.b)("p",null,"If you need ",Object(o.b)("a",{parentName:"p",href:"/graphql-kotlin/docs/schema-generator/federation/federation-tracing"},"federation tracing support"),", the context must implement the separate ",Object(o.b)("inlineCode",{parentName:"p"},"FederatedGraphQLContext")," interface from ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-kotlin-federation"),"."),Object(o.b)("p",null,"The reference server implementation ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-kotlin-spring-server")," ",Object(o.b)("a",{parentName:"p",href:"/graphql-kotlin/docs/server/spring-server/spring-graphql-context"},"supports federated tracing in the context"),"."))}p.isMDXComponent=!0},180:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),b=r,h=u["".concat(c,".").concat(b)]||u[b]||d[b]||o;return n?a.a.createElement(h,i(i({ref:t},s),{},{components:n})):a.a.createElement(h,i({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);