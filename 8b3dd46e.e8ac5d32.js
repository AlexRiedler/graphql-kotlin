(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{163:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return o})),a.d(n,"metadata",(function(){return l})),a.d(n,"toc",(function(){return c})),a.d(n,"default",(function(){return s}));var t=a(3),r=a(7),i=(a(0),a(234)),o={id:"maven-plugin-usage",title:"Maven Plugin Usage",sidebar_label:"Usage",original_id:"maven-plugin-usage"},l={unversionedId:"plugins/maven-plugin-usage",id:"version-4.x.x/plugins/maven-plugin-usage",isDocsHomePage:!1,title:"Maven Plugin Usage",description:"Downloading Schema SDL",source:"@site/versioned_docs/version-4.x.x/plugins/maven-plugin-usage.md",slug:"/plugins/maven-plugin-usage",permalink:"/graphql-kotlin/docs/plugins/maven-plugin-usage",editUrl:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/website/versioned_docs/version-4.x.x/plugins/maven-plugin-usage.md",version:"4.x.x",lastUpdatedBy:"Shane Myrick",lastUpdatedAt:1613785729,sidebar_label:"Usage",sidebar:"version-4.x.x/docs",previous:{title:"Maven Plugin Goals",permalink:"/graphql-kotlin/docs/plugins/maven-plugin-goals"},next:{title:"Schema Generator Hooks Provider",permalink:"/graphql-kotlin/docs/plugins/hooks-provider"}},c=[{value:"Downloading Schema SDL",id:"downloading-schema-sdl",children:[]},{value:"Introspecting Schema",id:"introspecting-schema",children:[]},{value:"Generating Generic Client",id:"generating-generic-client",children:[]},{value:"Generating Ktor or WebClient Based Client",id:"generating-ktor-or-webclient-based-client",children:[]},{value:"Generating Client with Custom Scalars",id:"generating-client-with-custom-scalars",children:[]},{value:"Generating Test Client",id:"generating-test-client",children:[]},{value:"Minimal Configuration Example",id:"minimal-configuration-example",children:[]},{value:"Complete Configuration Example",id:"complete-configuration-example",children:[]},{value:"Generating Multiple Clients",id:"generating-multiple-clients",children:[]},{value:"Generating SDL Example",id:"generating-sdl-example",children:[]},{value:"Generating SDL with Custom Hooks Provider Example",id:"generating-sdl-with-custom-hooks-provider-example",children:[]}],p={toc:c};function s(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(t.a)({},p,a,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"downloading-schema-sdl"},"Downloading Schema SDL"),Object(i.b)("p",null,"Download SDL Mojo requires target GraphQL server ",Object(i.b)("inlineCode",{parentName:"p"},"endpoint")," to be specified. Task can be executed directly from the\ncommand line by explicitly specifying ",Object(i.b)("inlineCode",{parentName:"p"},"graphql.endpoint")," property."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},'\n$ mvn com.expediagroup:graphql-kotlin-maven-plugin:download-sdl -Dgraphql.endpoint="http://localhost:8080/sdl"\n\n')),Object(i.b)("p",null,"Mojo can also be configured in your Maven build file"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},"\n<plugin>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-maven-plugin</artifactId>\n    <version>${graphql-kotlin.version}</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>download-sdl</goal>\n            </goals>\n            <configuration>\n                <endpoint>http://localhost:8080/sdl</endpoint>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n\n")),Object(i.b)("p",null,"By default, ",Object(i.b)("inlineCode",{parentName:"p"},"download-sdl")," goal will be executed as part of the ",Object(i.b)("inlineCode",{parentName:"p"},"generate-sources")," ",Object(i.b)("a",{parentName:"p",href:"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html"},"build lifecycle phase"),"."),Object(i.b)("h2",{id:"introspecting-schema"},"Introspecting Schema"),Object(i.b)("p",null,"Introspection Mojo requires target GraphQL server ",Object(i.b)("inlineCode",{parentName:"p"},"endpoint")," to be specified. Task can be executed directly from the\ncommand line by explicitly specifying ",Object(i.b)("inlineCode",{parentName:"p"},"graphql.endpoint")," property"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},'\n$ mvn com.expediagroup:graphql-kotlin-maven-plugin:introspect-schema -Dgraphql.endpoint="http://localhost:8080/graphql"\n\n')),Object(i.b)("p",null,"Mojo can also be configured in your Maven build file"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},"\n<plugin>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-maven-plugin</artifactId>\n    <version>${graphql-kotlin.version}</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>introspect-schema</goal>\n            </goals>\n            <configuration>\n                <endpoint>http://localhost:8080/graphql</endpoint>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n\n")),Object(i.b)("p",null,"By default, ",Object(i.b)("inlineCode",{parentName:"p"},"introspect-schema")," goal will be executed as part of the ",Object(i.b)("inlineCode",{parentName:"p"},"generate-sources")," ",Object(i.b)("a",{parentName:"p",href:"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html"},"build lifecycle phase"),"."),Object(i.b)("h2",{id:"generating-generic-client"},"Generating Generic Client"),Object(i.b)("p",null,"This Mojo generates GraphQL client code based on the provided queries using target GraphQL ",Object(i.b)("inlineCode",{parentName:"p"},"schemaFile"),". Classes are\ngenerated under specified ",Object(i.b)("inlineCode",{parentName:"p"},"packageName"),". When using default configuration and storing GraphQL queries under ",Object(i.b)("inlineCode",{parentName:"p"},"src/main/resources"),"\ndirectories, task can be executed directly from the command line by explicitly providing required properties."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},'\n$ mvn com.expediagroup:graphql-kotlin-maven-plugin:generate-client -Dgraphql.schemaFile="mySchema.graphql" -Dgraphql.packageName="com.example.generated"\n\n')),Object(i.b)("p",null,"Mojo can also be configured in your Maven build file to become part of your build lifecycle. Plugin also provides additional\nconfiguration options that are not available on command line."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},"\n<plugin>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-maven-plugin</artifactId>\n    <version>${graphql-kotlin.version}</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate-client</goal>\n            </goals>\n            <configuration>\n                <packageName>com.example.generated</packageName>\n                <schemaFile>mySchema.graphql</schemaFile>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n\n")),Object(i.b)("p",null,"This will process all GraphQL queries located under ",Object(i.b)("inlineCode",{parentName:"p"},"src/main/resources")," and generate corresponding GraphQL Kotlin clients.\nGenerated classes will be automatically added to the project compile sources."),Object(i.b)("p",null,">"," NOTE: You might need to explicitly add generated clients to your project sources for your IDE to recognize them. See\n",">"," ",Object(i.b)("a",{parentName:"p",href:"https://www.mojohaus.org/build-helper-maven-plugin/"},"build-helper-maven-plugin")," for details."),Object(i.b)("h2",{id:"generating-ktor-or-webclient-based-client"},"Generating Ktor or WebClient Based Client"),Object(i.b)("p",null,"By default, GraphQL Kotlin plugins will generate client code that uses generic ",Object(i.b)("inlineCode",{parentName:"p"},"GraphQLClient")," interface. Additional\nconfiguration options are available if you generate type specific client code but it will also put a restriction on\ntype of client that can be used for your queries."),Object(i.b)("p",null,"For example in order to generate Ktor based HTTP client we need to specify ",Object(i.b)("inlineCode",{parentName:"p"},"GraphQLClientType.KTOR")," client type. Alternatively,\nif you would like to use WebClient implementation instead you need to specify ",Object(i.b)("inlineCode",{parentName:"p"},"GraphQLClientType.WEBCLIENT")," instead."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},"\n<plugin>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-maven-plugin</artifactId>\n    <version>${graphql-kotlin.version}</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate-client</goal>\n            </goals>\n            <configuration>\n                <clientType>KTOR</clientType>\n                <packageName>com.example.generated</packageName>\n                <schemaFile>mySchema.graphql</schemaFile>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n\n")),Object(i.b)("h2",{id:"generating-client-with-custom-scalars"},"Generating Client with Custom Scalars"),Object(i.b)("p",null,"By default, all custom GraphQL scalars will be serialized as Strings. You can override this default behavior by specifying\ncustom ",Object(i.b)("a",{parentName:"p",href:"https://github.com/ExpediaGroup/graphql-kotlin/blob/master/graphql-kotlin-client/src/main/kotlin/com/expediagroup/graphql/client/converter/ScalarConverter.kt"},"scalar converter"),"."),Object(i.b)("p",null,"For example given following custom scalar in our GraphQL schema"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"\nscalar UUID\n\n")),Object(i.b)("p",null,"We can create a custom converter to automatically convert this custom scalar to ",Object(i.b)("inlineCode",{parentName:"p"},"java.util.UUID")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-kotlin"},"\npackage com.example\n\nimport com.expediagroup.graphql.client.converter.ScalarConverter\nimport java.util.UUID\n\nclass UUIDScalarConverter : ScalarConverter<UUID> {\n    override fun toScalar(rawValue: String): UUID = UUID.fromString(rawValue)\n    override fun toJson(value: UUID): String = value.toString()\n}\n\n")),Object(i.b)("p",null,"Afterwards we need to configure our plugin to use this custom converter"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},"\n<plugin>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-maven-plugin</artifactId>\n    <version>${graphql-kotlin.version}</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate-client</goal>\n            </goals>\n            <configuration>\n                <allowDeprecatedFields>false</allowDeprecatedFields>\n                <customScalars>\n                    <customScalar>\n                        \x3c!-- custom scalar UUID type\n                        scalarUUID\n                         fully qualified Java class name of a custom scalar type\n                        typejava.util.UUID\n                         fully qualified Java class name of a custom com.expediagroup.graphql.client.converter.ScalarConverter\n                           used to convert to/from raw JSON and scalar type\n                        convertercom.example.UUIDScalarConverter\n\n\n                packagenamecom.example.generated\n                schemafilemySchema.graphql\n\n\n\n--&gt;\n\n")),Object(i.b)("h2",{id:"generating-test-client"},"Generating Test Client"),Object(i.b)("p",null,"This Mojo generates GraphQL Kotlin test client code based on the provided queries using target GraphQL ",Object(i.b)("inlineCode",{parentName:"p"},"schemaFile"),". Classes\nare generated under specified ",Object(i.b)("inlineCode",{parentName:"p"},"packageName"),". When using default configuration and storing GraphQL queries under ",Object(i.b)("inlineCode",{parentName:"p"},"src/test/resources"),"\ndirectories, task can be executed directly from the command line by explicitly providing required properties."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},'\n$ mvn com.expediagroup:graphql-kotlin-maven-plugin:generate-test-client -Dgraphql.schemaFile="mySchema.graphql" -Dgraphql.packageName="com.example.generated"\n\n')),Object(i.b)("p",null,"Mojo can also be configured in your Maven build file to become part of your build lifecycle. Plugin also provides additional\nconfiguration options that are not available on command line."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},"\n<plugin>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-maven-plugin</artifactId>\n    <version>${graphql-kotlin.version}</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate-test-client</goal>\n            </goals>\n            <configuration>\n                <packageName>com.example.generated</packageName>\n                <schemaFile>mySchema.graphql</schemaFile>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n\n")),Object(i.b)("p",null,"This will process all GraphQL queries located under ",Object(i.b)("inlineCode",{parentName:"p"},"src/test/resources")," and generate corresponding GraphQL Kotlin test clients.\nGenerated classes will be automatically added to the project test compile sources."),Object(i.b)("p",null,">"," NOTE: You might need to explicitly add generated test clients to your project test sources for your IDE to recognize them.\n",">"," See ",Object(i.b)("a",{parentName:"p",href:"https://www.mojohaus.org/build-helper-maven-plugin/"},"build-helper-maven-plugin")," for details."),Object(i.b)("h2",{id:"minimal-configuration-example"},"Minimal Configuration Example"),Object(i.b)("p",null,"Following is the minimal configuration that runs introspection query against a target GraphQL server and generates a corresponding schema.\nThis generated schema is subsequently used to generate GraphQL client code based on the queries provided under ",Object(i.b)("inlineCode",{parentName:"p"},"src/main/resources")," directory."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},"\n<plugin>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-maven-plugin</artifactId>\n    <version>${graphql-kotlin.version}</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>introspect-schema</goal>\n                <goal>generate-client</goal>\n            </goals>\n            <configuration>\n                <endpoint>http://localhost:8080/graphql</endpoint>\n                <packageName>com.example.generated</packageName>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n\n")),Object(i.b)("p",null,">"," NOTE: Both ",Object(i.b)("inlineCode",{parentName:"p"},"introspect-schema")," and ",Object(i.b)("inlineCode",{parentName:"p"},"generate-client")," goals are bound to the same ",Object(i.b)("inlineCode",{parentName:"p"},"generate-sources")," Maven lifecycle phase.\n",">"," As opposed to Gradle, Maven does not support explicit ordering of different goals bound to the same build phase. Maven\n",">"," Mojos will be executed in the order they are defined in your ",Object(i.b)("inlineCode",{parentName:"p"},"pom.xml")," build file."),Object(i.b)("h2",{id:"complete-configuration-example"},"Complete Configuration Example"),Object(i.b)("p",null,"Following is a configuration example that downloads schema SDL from a target GraphQL server that is then used to generate\nthe GraphQL client code based on the provided query."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},'\n<plugin>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-maven-plugin</artifactId>\n    <version>${graphql-kotlin.version}</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>download-sdl</goal>\n                <goal>generate-client</goal>\n            </goals>\n            <configuration>\n                <endpoint>http://localhost:8080/sdl</endpoint>\n                <packageName>com.example.generated</packageName>\n                \x3c!-- optional configuration below\n                schemafile${"{"}project.build.directory{"}"}/mySchema.graphql\n                allowdeprecatedfieldstrue\n                customscalars\n\n\n                        UUID\n\n                        java.util.UUID\n\n                        com.example.UUIDScalarConverter\n\n\n                headers\n                    My-Custom-Header\n\n                timeoutconfiguration\n\n                    1000\n                    30000\n\n                queryfiles\n                    ${"{"}project.basedir{"}"}/src/main/resources/queries/MyQuery.graphql\n\n\n\n\n--&gt;\n\n')),Object(i.b)("h2",{id:"generating-multiple-clients"},"Generating Multiple Clients"),Object(i.b)("p",null,"In order to generate GraphQL clients targeting multiple endpoints, we need to configure separate executions targeting\ndifferent endpoints."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},"\n<plugin>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-maven-plugin</artifactId>\n    <version>${graphql-kotlin.version}</version>\n    <executions>\n        <execution>\n            <id>generate-first-client</id>\n            <goals>\n                <goal>introspect-schema</goal>\n                <goal>generate-client</goal>\n            </goals>\n            <configuration>\n                <endpoint>http://localhost:8080/graphql</endpoint>\n                <packageName>com.example.generated.first</packageName>\n                <queryFiles>\n                    <queryFile>${project.basedir}/src/main/resources/queries/FirstQuery.graphql</queryFile>\n                </queryFiles>\n            </configuration>\n        </execution>\n        <execution>\n            <id>generate-second-client</id>\n            <goals>\n                <goal>introspect-schema</goal>\n                <goal>generate-client</goal>\n            </goals>\n            <configuration>\n                <endpoint>http://localhost:8081/graphql</endpoint>\n                <packageName>com.example.generated.second</packageName>\n                <queryFiles>\n                    <queryFile>${project.basedir}/src/main/resources/queries/SecondQuery.graphql</queryFile>\n                </queryFiles>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n\n")),Object(i.b)("h2",{id:"generating-sdl-example"},"Generating SDL Example"),Object(i.b)("p",null,"GraphQL schema can be generated directly from your source code using reflections. ",Object(i.b)("inlineCode",{parentName:"p"},"generate-sdl")," mojo will scan your\nclasspath looking for classes implementing ",Object(i.b)("inlineCode",{parentName:"p"},"Query"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Mutation")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Subscription")," marker interfaces and then generates the\ncorresponding GraphQL schema using ",Object(i.b)("inlineCode",{parentName:"p"},"graphql-kotlin-schema-generator")," and default ",Object(i.b)("inlineCode",{parentName:"p"},"NoopSchemaGeneratorHooks"),". In order to\nlimit the amount of packages to scan, this mojo requires users to provide a list of ",Object(i.b)("inlineCode",{parentName:"p"},"packages")," that can contain GraphQL\ntypes."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},"\n<plugin>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-maven-plugin</artifactId>\n    <version>${graphql-kotlin.version}</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate-sdl</goal>\n            </goals>\n            <configuration>\n                <packages>\n                    <package>com.example</package>\n                </packages>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n\n")),Object(i.b)("h2",{id:"generating-sdl-with-custom-hooks-provider-example"},"Generating SDL with Custom Hooks Provider Example"),Object(i.b)("p",null,"Plugin will default to use ",Object(i.b)("inlineCode",{parentName:"p"},"NoopSchemaGeneratorHooks")," to generate target GraphQL schema. If your project uses custom hooks\nor needs to generate the federated GraphQL schema, you will need to provide an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"SchemaGeneratorHooksProvider"),"\nservice provider that will be used to create an instance of your custom hooks."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"generate-sdl")," mojo utilizes ",Object(i.b)("a",{parentName:"p",href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ServiceLoader.html"},"ServiceLoader"),"\nmechanism to dynamically load available ",Object(i.b)("inlineCode",{parentName:"p"},"SchemaGeneratorHooksProvider")," service providers from the classpath. Service provider\ncan be provided as part of your project, included in one of your project dependencies or through explicitly provided artifact.\nSee ",Object(i.b)("a",{parentName:"p",href:"/graphql-kotlin/docs/plugins/hooks-provider"},"Schema Generator Hooks Provider")," for additional details on how to create custom hooks service provider.\nConfiguration below shows how to configure GraphQL Kotlin plugin with explicitly provided artifact to generate federated\nGraphQL schema."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-xml"},"\n<plugin>\n    <groupId>com.expediagroup</groupId>\n    <artifactId>graphql-kotlin-maven-plugin</artifactId>\n    <version>${graphql-kotlin.version}</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate-sdl</goal>\n            </goals>\n            <configuration>\n                <packages>\n                    <package>com.example</package>\n                </packages>\n            </configuration>\n        </execution>\n    </executions>\n    <dependencies>\n        <dependency>\n            <groupId>com.expediagroup</groupId>\n            <artifactId>graphql-kotlin-federated-hooks-provider</artifactId>\n            <version>${graphql-kotlin.version}</version>\n        </dependency>\n    </dependencies>\n</plugin>\n\n")))}s.isMDXComponent=!0},234:function(e,n,a){"use strict";a.d(n,"a",(function(){return u})),a.d(n,"b",(function(){return m}));var t=a(0),r=a.n(t);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),s=function(e){var n=r.a.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=s(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(a),d=t,m=u["".concat(o,".").concat(d)]||u[d]||g[d]||i;return a?r.a.createElement(m,l(l({ref:n},p),{},{components:a})):r.a.createElement(m,l({ref:n},p))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:t,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);